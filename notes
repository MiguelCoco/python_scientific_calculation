                                                      python科学计算第二版
CHAPTER 2
Numpy
    提供两种基本的对象：
	      ndarray,存储单一数据类型的多维数组，统称为数组
        
        ufunc,一种能对数组进行数据处理的特殊函数
        
ndarray对象
    创建ndarray对象
	      通过给array（）函数传递python的序列对象来创建函数，如果是多层的嵌套的序列，将创建多维数组
	      a = np.array([1,2,3,4])
        b = np.array([5,6,7,8])
       	c = np.array([[1,2,3,4],[4,5,6,7],[7,8,9,10]])
       
       	b
        		array[5,6,7,8]
       	c
          	array[[1,2,3,4],
                	[4,5,6,7],
                  [7,8,9,10]]
       
		数组的形状可以通过shape属性获得，它是一个描述数组各个轴的长度的元组：
        a.shape  (4,）
        b.shape  (4,)
        c.shape  (3,4)
            数组a的shape属性只有一个元素，因此是一维数组，轴的长度为4；数组c的shape属性有两个元素，因此它是二维数组，第0轴长度为3，第一轴长度为4
    修改数组的shape属性可以保持数组元素个数不变的同时，改变数组各轴的长度
        c.shape = 4,3
        c
            array([[1,2,3],
                   [4,4,5],
                   [6,7,7],
                   [8,9,10]])
			  从(3,4)改为（4,3）并不是对数组进行转置，而是改变轴的长度，数组元素在内存中的位置并没有改变
      
      设置某个轴的元素个数为-1时，将自动计算轴的长度
          c.shape =2,-1
          c
              array([[1,2,3,4,4,5],
                     [6,7,7,8,9,10]])
      使用数组的reshape()方法，可以创建指定形状的新数组，而原数组的形状保持不变
          d = a.reshape(2,2)
          d
              array[[1,2],
                    [3,4]]
          a
              array[1,2,3,4]
              
      数组a和d共用数据存储空间，修改其中任意一个数组的元素，另一个数组的元素会同时修改
          a[1] = 100
          a
              array[1,100,3,4]
          d
              array[[1,100],
                    [3,4]]
     
元素类型
    数组的元素类型可以通过dtype属性获得
        c.dtype
        创建数组是可指定元素类型，float是64位双精度浮点类型，complex是128位双精度复数类型
            a_int32 = np.array([1,2,3],dtype=np.int32)
            a_f=np.array([1,2,3],dtype=float)
            a_c=np.array([1,2,3],dtype=complex)
            np.int32是numpy的函数，float是python内置函数，numpy也有float16、float32函数
        numpy中每种数值类型都有几种字符串表示方式，字符串和类型之间的对应关系都存储在typeDict字典中
            [key for key,value in np.typeDict.items() if value is np.float64]
        完整的类型列表可通过set(np.typeDict.values())    
        通过数值类型也可以创建数值对象
            a = np.int16(200)
            通过数值类型创建的数值取值范围小于标准python数值取值范围
            numpy的数值对象的运算速度比python内置类型的运算速度慢很多，numpy的数组运算速度比python的列表数组快很多
        使用astype()方法可以对数组的元素类型进行转换
            tl = np.array([1, 2, 3, 4], dtype=np.float) 
            t2 = np.array([1, 2, 3, 4], dtype=np.complex) 
            t3 = tl.astype(np.int32) 
            t4 = t2.astype(np.complex64)
            
自动生成数组
    arange([start,] stop[, step,], dtype=None)
        指定开始值、终止值、步长值创建等差数列的一位数组，注意不包含终止值
    linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)
        指定开始值、终止值、元素个数创建等差数列的一维数组，endpoint指定是否包含终值，默认为True
    logspace(start,stop,num=50,endpoint=True,base=10,dtype=None)
        指定开始值、终止值、元素个数、endpoint指定是否包含终值、base指定基数，创建等比数列的一维数组
        np.logspace(0,2,5)
            起始值表示10的0次方，终值10的2次方，元素个数5，基数默认10
        
     empty(shape, dtype=float, order='C')
        指定形状可以是整数或元组、指定类型、order指定以C类型或F类型存储多维数组
        empty只分配数组使用的内存，而不初始化，速度最快
     zeros(shape, dtype=float, order='C')
        指定形状、类型、存储类型
        zeros将数组元素初始化为0
     ones(shape, dtype=None, order='C')
        指定形状、类型、存储类型
        ones将数组元素初始化为1
     full(shape, fill_value, dtype=None, order='C')
        指定形状、指定标量（数值）、类型、存储类型
        将数组元素初始化为某一值
     zeros_like()、ones_like()、empty_like()、full_like()等函数创建与参数数组的形状和类型相同的数组
        因此zeros_ike(a)和zeros(a.shape，a.dtype)的效果相同  
     frombuffer()、fromstring()、fromfile()等函数可以从字节序列(字符串)或文件创建数组       
        fromstring(string, dtype=float, count=-1, sep='')
            指定字符串、数据类型、count指定返回数组的长度
        fromstring会对字符序列进行复制，frombuffer不复制，共享内存    
    fromfunction(function, shape, **kwargs)
        第一个参数是计算数组元素的函数，第二个参数指定数组的形状，必须是序列
        创建九九乘法表二维数组：
            def fun(i,k):
                return (i+1)*(k+1)
            np.fromfunction(fun,(9,9)）
存取元素
    可以使用和列表相同的方式对数组的元素进行存取
    a = np.arange(10)
    a
        array([0,1,2,3,4,5,6,7,8,9])
    
    使用切片下标存取元素
        a[x]:用整数x作下标可以获取数组中第x个元素的值
        a[x:y]:切片作为下标，获取数组的一部分，包括数组中第x个元素的值，不包括第y个元素的值
        a[:y]:切片省略开始下标，开始下标默认为a[0]
        a[:-y]:下标可以使用负数，倒数第y个
        a[x:y:z]切片中第三个参数代表步长
        a[y:x:-z]步长为负时，开始下标必须大于结束下标
        下标还可以用来修改元素的值
        a[2:4] = 100,1001
        a
            array([0,1,100,101,4,,6,7,8,9])
        数组和列表不同的是，通过切片获取的新的数组是原始数据的一个视图，与原始数据共享同一块数据存储空间
    
    使用整数列表存取元素
        使用整数列表存取元素，将使用整数列表作为数组的下标，得到的新数组不再和原始数组共享内存
        a[[1,3,5]]
            array([1,3,5])
            提取a数组中第1、第3、第5个元素
        整数列表下标也可用用来修改元素的值
            a[[1,2,3]] = 11,22,33
            a
                array([0,11,22,33,4,5,6,7,8,9])
        整数数组下标是多维数组，得到的也是多维数组
        
        
多维数组
    多维数组的下标用多个值来表示，numpy采用元组作为数组的下标，元组中的每个元素和数组的每个轴对应
    
    可以将元组保存在一个变量中，用同一个元组存取多个数组
    
    切片（slice）对象
        单独生成切片对象时需要使用slice()创建
        语法
            slice(start,stop,step)忽略的参数可以使用slice(None,None,None)
        numpy提供一个s_对象帮我们创建数组下标（切片），s_实际上是IndexExpression类的对象：
        np.s_[::2,2:]
            (slice(None,None,2),slice(2,None,None))
        
    在多维数组的下标元组中，也可以使用整数元组或列表、整数数组和布尔数组    
        a[(0,1,2,3],[1,2,3,4])会取 a[(0,1)] a[(1,2)] a[(2,3)] a[(3,4)]
        
结构数组
    创建对象（persontype），描述结构类型的各个字段的字典
        字典包括字段名称和字段类型的键值对
    调用array（）创建数组，通过dtype参数指定数组的类型为对象（persontype）
    结构数组的存取和一般数组相同，通过下标能够取得其中的元素，元素看上去像元组，其实是结构
    
    a.tostring和a.tofile可以将数组a以二级制的方式转换成字符串或写入文件
    然后C语言即可读取文件或识别字符串
    
内存结构
    数组对象如何在内存中存储？
        数组的描述信息保存在一个数据结构中，这个结构存储了两种信息（用于保存数据的存储区域和用于描述元素类型的dtype对象），数组对象使用strides属性保存每个轴上相邻的两个元素的地址差，即当某个轴的下标增加1时，数据存储区中的指针所增加的字节数，如果strides属性中的数值正好和对应轴所占据的字节数相同，那么数据在内存中是连续存储的。，通过切片下标得到的新数组是原始数组的视图，和原始数组共享数据存储区域，但新数组的strides属性会发生变化，由于新数组和原数组共享数据存储区域，新数组和原数组的strides属性成倍数关系    
        
        元素在数据存储区中的排列格式有两种：C语言格式和Fotran格式
            C语言中，多维数组的第0轴是最上位的，即第0轴的下标增加1时，元素的地址增加的字节数最多
            Fortran语言中，多维数组的第0轴是最下位的，即第0轴的下标增加1时，元素的地址只增加一个元素的字节数
            更改格式类型可在Order参数设置
            
        数组复制和引用产生的原因？
            切片和整数下标时，数据在数据存储区域中是等间隔的，数组结构的属性不改变，所以共享内存区域
            整数序列、整数数组和布尔数组时，不能保证所取得的数据在数据存储区域中是等间隔的，因此无法共享数据，只能复制
        flags属性描述了数据存储区域的一些属性
            C_CONTIGUOUS:数据存储区域是否是C语言格式的连续区域
            F_CONTIGUOUS:数据存储区域是否是Fortran语言格式的连续区域
            OWNDATA:数组是否拥有此数据存储区域，当一个数组是其他数组的视图时，它不拥有数据存储区域
            
unfuc函数
    unfunc是universal function 的缩写，它是一种能对数组的每个元素进行运算的函数，Numpy内置的许多ufunc函数都是用C语言实现的，因此他们的计算速度非常快
    
    四则运算
        计算两个数组的和add()函数
           np.add(*args, **kwargs)
           add()函数返回一个数组，它的每个元素都是原来两个参数数组的对应元素之和，如果没有指定out参数，创建新的数组，指定out不创建新的数组  
        
            y = xl +x2                      add(xl,x2[,y])
            y = xl -x2                      subtract(xl, x2 [, y])
            y = xl * x2                     multiply(xl, x2 [, y])
            y = xl /x2                      divide(xl，x2 [，y])，如果两个数组的元素为整数，那么爪整数除法
            y = xl /x2                      true_divide(xl，x2 [，y]),总是返回精确的商
            y = xl //x2                     floor_divide(xl，x2 [，y]),总是对返回值取盤
            y = —x                          negative(x [,y])
            y = xl**x2                      power(xl,x2 [, y])
            y = xl % x2                     remainder(xl, x2 [, y]), mod(xl, x2, [, y])

    比较运算
        使用比较运算符对两个数组进行比较，将返回一个布尔数组，每个元素值都是两个数组对应元素的比较结果
            y = x 1 =x2         equal(xl，x2[，y])
            y =xl !=x2          not_equal(xl,x2 [, y])
            y = xl <x2          less(xl, x2, [, y])
            y = xl <=x2         less_equal(xl, x2, [，y])
            y = xl >x2          greater(xl,x2, [,y])
            y = xl >=x2         greater_equal(xl, x2, [，yj)
    布尔运算
        因为python中的布尔运算使用and、or、not等，所以在Numpy中只能用函数，np.logical_and、np.logical_or、np.logical_not
       
    自定义函数
        frompyfunc(func，nin,nout)
            func是计算单个元素的函数，nin是func的输入参数的个数，nout是func的返回值的个数
            注意！新生成的函数ufunc返回的元素类型是object需要调用astype()方法转换类型
    广播
        使用ufunc函数时，要求数组的形状相同，如果不同会进行广播（broadcasting）处理
            1、让所有输入数姐都向其中维数最多的数组看齐，shape属性中不足的部分都通过在前面加1补齐。
            2、输出数组的shape属性是输入数组的shape属性的各个轴上的最大值。
            3、如果输入数组的某个轴的长度为1或与输出数组的对应轴的长度相同，这个数组能够用来计算，否则出错。
            4、当输入数组的某个轴的长度为1吋，沿着此轴运算时都用此轴上的第一组值
        广播计算函数：
            ogrid([start:stop,start:stop])
            mgrid([start:stop,start:stop])
            None可作为下标，将在None的位置创建一个长度为1的新轴
                a[None,:] 等同于 a.reshape(1,-1)
                a[:,None] 等同于 a.reshape(-1,1)
            ix_（）可将两个一维数组转换成可广播的二维数组
            
多维数组的下标存取（？？？？）
    下标对象，多维数组的下标应该是一个长度和数组的维数相同的元组，如果不是元组，将自动补充为元组，尽可能“显示”的使用元组作为下标
      
庞大的函数库
    随机数      
        from numpy import random as nr
        函数名				功能					函数名			功能
        rand 			  0到1之间的随机数		  randn 		 标准正态态分布的随机数
        randint 		  指定范围内的随机整数    normal 		  正态分布
        uniform 		  均匀分布				 poisson 	   泊松分布
        permutation 	  随机排列				 shuffle       随机打乱顺序
        choice 			  随机抽取样本		   seed 		 设置随机数种子

        np.set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None)
        precision精度，默认为8，可选

        nr.rand(x,y)
          rand()产生0到1之间的随机浮点数，参数x,y用于指定参数，未指定默认返回0到1之间的一个浮点数
        randn()产生0到1之间的符合标准正态分布的随机数，参数同rand()
        randint(start，stop，shape(x,y))产生指定范围内的随机浮点数，包含起始值，不包含终值，最后参数为形状 
        normal（）:正态分布，前两个参数分别为期望值和标准差。
        uniform（）:均匀分布，前两个参数分别为区间的起始值和终值。
        poisson（）:泊松分布，第一个参数指定λ系数，它表示单位时间(或单位而积)内随机事件的平均发生率。由于泊松分布是一个离散分布，因此它输出的数组是一个整数数组
        permutation()置换，可以用于产生一个乱序数组，当参数为整数n时，它返回[0，n)这n个整数的随机排列；当参数为一个序列时，它返回一个随机排列之后的序列    
        permutation（）返回一个新数组，而shuffle（）则直接将参数数组的顺序打乱    
        choice()从指定的样本中随机抽取    
          choice(a, size=None, replace=True, p=None)    
              size用于输出数组的形状
              replace参数为True是，进行可重复抽取，结果中可能有重复值
              p指定元素被抽取的概率
              为了保证每次运行时能重现相同的随机数，可以通过seed（）函数指定随机数的种子
    
    求和、平均值、方差
        函数名       功能          函数名           功能
        sum         求和           mean            求期望
        average     加权平均数     std              标准差
        var         方差           product          连乘积
    
        sum()计算数组元素之和，可以对列表、元组等数组类似的序列进行求和，当数组是多维的时候，它计算所有元素之和
            np.sum(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
            如果指定axis轴，则求和运算沿着指定轴进行，结果数组的形状是原始数组形状除去axis轴元素
            如果希望维持原数组的维数，可以设置参数keepdims参数为True
        mean()函数与sum()使用方法相同
            np.mean(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)      
        averag()也可以对数组进行平均计算，没有out和dtype参数，特有制定每个元素的权值的weights参数，进行加权平均数计算
        std()和var()分别计算数组的标准差和方差
    
    大小排序
        函数名                 功能                函数名               功能
        min                    最小值              max                 最大值
        minimum                二元最小值          maximum             二元最大值
        ptp                    最大值与最小值的差   argmin              最小值的下标
        argmax                 最大值的下标         uniuveljndex        一维下标转换成多维下标
        sort                   数组排序            argsort              计箅数组排序的下标
        lexsort                多列排序            partition            快速计算前k位
        argpartition           前k位的下标         median               中位数
        percentile             百分位数           searchsorted          二分查找

        用min()和max()可以汁算数组的最小值和最大值，它们都有axis、out、keepdims等参数。这些参数的用法和sum（）参数相同，但是axis参数不支持序列。此外，ptp()计算最大值和最小值之间的差，有axis和out参数。minimumO 和maximum()用于比较两个数组对应下标的元素，返回数组的形状为两参数数组广播之后的形状。
        argmax()和argmin()可以求最大值和最小值的下标。如果不指定axis参数，则返回平坦化之后的数组下标
        数组的sort（）方法对数组进行排序，它会改变数组的内容而sort（）函数则返冋一个新数组， 不改变原始数组  
        argsort()返回数组的排序下标  
        
    统计函数
        函数名                      功能                函数名               功能
        unique                    去除重复元素          bincount          对整数数组的元素计数
        histogram                 一维直方图统计         digitze          离散化
        unique（）返回其参数数组中所有不同的值，并且按照从小到大的顺序排列
            retumjndex: Ture表示同时返回原始数组中的下标
            retumjnverse: True表示返回重建原始数组用的下标数组
        bincount（）对整数数组中各个元素所出现的次数进行统计，它要求数组中的所有元素都是非负的。其返回数组中第i个元素的值表示整数i出现的次数
        histogram()对一维数组进行直方图统计
        
    分段函数
        函数名           功能
        where           欠量化判断表达式
        piecewise       分段函数
        select          多分支判断选择

    操作多维数组
        函数名                   功能                      函数名              功能
        concatenate             连接多个数组              vstack            沿第0轴连接数组
        hstack                  沿第1轴连接数组           column一stack     按列连接多个一维数绀
        split、airay_split      将数组分为多段            transpose         重新设置轴的顺序
        swapaxes                交换两个轴的顺序

        concatenate()是连接多个数组的最基本的函数，其他函数都是它的快捷版本
        它的第一个参数是包含多个数组的序列，它将沿着axis参数指定的轴(默认为第0轴)连接数组。所有这些数组的形状除了第axis轴之外都相同
    
    多项式函数（？？？）
    
    多项式函数类（？？？）
    
    各种乘积运算
        函数名         功能          函数名         功能
        dot           矩阵乘积       inner         内积
        outter        外积           tensordot     张量乘积

    广义ufunc函数
        
实用技巧（？？？？）

        
CHAPTER 3
SciPy-数值计算库
    Scipy在numpy的基础上增加了众多的数学计算、科学计算以及工程计算中常用的模块，如线性代数、常微分方程数值求解、信号处理、图像处理、稀疏矩阵等
    import scipy
    scipy.__version__
    '0.19.0'
    
    constants模块包含了众多物理常数：
        from scipy import constants as C
        print(C.c)#真空中的光速
        print(C.h)#普朗克常数
        在字典physical_constants中，以物理常量名为键，对应的值是一个含有三个元素的元组，分别为常数值、单位以及误差
            C.physical_constants['electron mass']
         除了物理常数之外，constants模块中还包括了许多单位信息，它们是1单位的量转换成标准单位时的数值
             C.mile #1英里等于多少米
             C.inch #1英寸等于多少米
             C.gram #1克等于多少千克
             C.pound #1磅等于多少千克
    special模块是一个非常完整的函数库，其中包含了基本数学函数、特殊数学函数以及Numpy中出现的所有函数   
        伽马（gamma）函数是概率统计学中经常出现的一个特殊函数，可以用special模块中的gamma()进行计算
            import scipy.special as S
            print(S.gamma(4))
            print(S.gamma(0.5))
            print(S.gamma(1+1j))#gamma函数支持复数
        伽马函数是阶乘函数在实数和复数系上的扩展，它的增长速度非常快1000已经超过双精度浮点数的范围，因此结果无穷大，因此可以使用gammaln()计算gamma函数的对数值
          
        special模块中的某些函数并不是数学意义上的特殊函数，log1p(x)计算log(1+x)的值。由于浮点数的精度有限，无法很精确表示非常接近1的实数，例如无法用浮点数表示1+le-20的值，因此log(1+le-20)的值为0，而使用log1p(1+le-20)可以精确计算，值为1e-20
    
        ellipj(u,m)计算雅可比椭圆函数
            它有两个参数u和m，返回4个值sn、cn、dn和φ（fai圆的直径）
        
    optimize模块提供了许多数值优化算法，如非线性方程组求解、数据拟合、函数最小值
        最小二乘拟合
            假设有一组实验数据（xi,yi），我们知道它们之间应该满足某函数关系yi=f(xi).通过这些已知信息，需要确定函数f()的一些参数。如果用P表示函数中需要确定的参数，则目标是找到一组P使得函数S的值最小，这种方法称为最小二乘拟合
         leastsq()对数据进行最小二乘拟合计算
            leastsq()只需将计算误差的函数和待确定参数的初始值传递给它即可
                import numpy as np
                from scipy import optimize
                X = np.array([8.19,2.71,6.39,8.71,4.7,2.66,3.78])
                Y = np.array([7.01,2.78,6.47,6.71,4.1,4.23,4.05])
                
                def residuals(p):
                    "计算以P为参数的直线和原始数据之间的误差"
                    k,b=p
                    return Y-(K*X+b)
                 
                 #leastsq使得residuals()的输出数组的平方和最小，参数的初始值为[1,0]
                 r=optimieze.leastsq(residuals,[1,0])
                 k,b=r[0]
                 print('k = ',k,'b = ',b)
                 
        计算函数局域最小值
	  	      optimize库还提供了许多求函数最小值的算法：Nelder-Mead、Powell、CG、BFGS、Newton-CG、L-BFGS-B
        
        计算全域最小值
            optimize库还提供了几种能进行全局优化的算法
CHAPTER 4
matplotlib-绘制精美的图表
    matplotlib采用面向对象的技术来实现，因此组成图表的各个元素都是对象，在编写较大的应用程序时通过面向对象的方式使用matplotlib将更加有效。
        但是使用这种而向对象的调用接口进行绘图比较烦琐，因此matplotlib还提供了快速绘图的pyplot模块
    jupyter notebook调用matplotlib:
        %matplotlib inline
    在多个单元格操纵统一图表：
        %config InlineBackend.close_figures = False
    使用pyplot模块绘图
        import matplotlib.pyplot as plt #载入快速绘图模块pyplot，重命名plt
        import numpy as np #载入numpy模块
        x = np.linspace(0, 10, 1000) #等差数列赋值给变量x
        y = np.sin(x) #变量x的正弦函数值赋值给变量y
        z = np.cos(x**2)#变量x的平方值的余弦函数赋值给变量z
        plt.figure(figsize=(8,4)) #调用figure()函数创建Figure对象
        plt.plot(x,y,label="$sin(x)$",color="red",linewidth=2)
        plt.plot(x,z,"b--",label="$cos(x^2)$") 
        plt.xlabel("Time(s)") 
        plt.ylabel("Volt")  
        plt.title("PyPlot First Example") 
        plt.ylim(-1.2,1.2) 
        plt.legend()
        plt.show()
   


        


















CHAPTER 5
Pandas-方便的数据分析库
    import pandas as pd
    pd.__version__
    '0.20.3'
python中的数据对象
    Series和DataFrame是最常用的两个对象
    Series是pandas中最基本的对象，可以用numpy的数组处理函数直接对series对象进行处理，支持位置作为下标存取，也支持索引标签作为下标索引
        index：从ndarray数组继承的index索引对象，保存标签信息
        
        values:保存元素值的ndarray数组，Numpy的函数都对此数组进行处理
    
        创建一个Series对象
            import pandas as pd
            s=pd.Series([1,2,3,4,5],index=['a','b','c','d','e'])
            s.index
            s.values
         Series对象的下标运算同时支持位置和索引两种形式
            s[2]
            s['c']
         Series对象还支持位置切片和标签切片，不同于位置切片，标签切片同时包括起始标签和结束标签   
            s[1:5]
            s['a':'c']
        Series对象可以使用位置/标签列表或位置/标签数组存取元素
            s[[1,2,3]]
            s[['a','c','d']
        Series对象同时具有数组和字典的功能，Series.iteritems()
            list(s.iteritems())
        对两个Series对象进行操作符运算时，pandas会按照标签对齐元素，也就是说运算操作符会对标签相同的两个元素进行计算，当标签不存在时，默认填充nan
        
    
    DataFrame对象
        DataFrame对象（数据表）是pandas中最常用的数据对象
        DataFrame的各个组成元素
            read_csv()从文件读取数据，index_col设置索引，parse_dates日期转换
                
            shape属性可以获得形状（行数和列数）
                
            index属性保存行索引，columns属性保存列索引，列索引是一个index对象，索引对象的名称可以通过name属性获得，行索引是一个表示多级索引的MultiIndex对象，每级的索引名可以通过names属性获得
                
            DataFrame对象有两个轴，它的第0轴为纵轴，第1轴为为横轴,index为纵轴，columns为纵轴
                
            []运算符可以通过列索引标签获取指定的列，当下标是单个标签时，返回Series,下标是列表时，返回新的DataFrame对象
                
            .loc[]可通过行索引标签获取指定的行，当结果为一行时得到的是Series对象，结果为多行时得到的是DataFrame对象
                
            values属性将DataFrame对象转换成数组，当列类型不统一时，数组是object的数组
        
        数据转换为DataFrame属性
            DataFrame()可以将多种格式的数据转换成DataFrame对象，它的三个参数data、index和columns分别为数据、行索引、列索引
            data参数可以是：
                二维数组或能转换成二维数组的嵌套列表
                字典
                
            将一个形状为(4, 2)的二维数组转换成DataFrame对象，通过index和columns参数指定行和列的索引。
            将字典转换为DataFrame对象，其列索引由字典的键决定，行索引由index参数指定。
            将结构数组转换为DataFrame对象，其列索引由结构数组的字段名决定，行索引默认为从0幵始的整数序列    
            
            from_开头的类方法，将特定格式的数据转换成DataFrame对象
                from_dict（）将字典转换为DataFrame对象，orient参数可以指定字典键对应的方向，默认为“columns”
                from_items()将“(键，值)”序列转换为DataFrame对象，其中“值”是表示一维数据的列表、数组或Series对象。
                    当其orient参数为"index"时，需要通过columns指定列索引
        
        Index对象
            index对象保存索引标签数据，它可以快速找到标签对应的整数下标，values属性可以获得保存标签的数组
            index对象可当作一维数组，通过与numpy数组相同的下标操作可以得到一个新的index对象，但是index对象是只读的，一旦创建便无法修改其中的元素
       
        MultiIndex对象
          MultiIndex表示多级索引，通过[]获取其中的单个元素，调用get_loc()和get_indexer()获取单个标签和多个标签对应的下标

      
        常用的函数参数
            参数名             常用值                     说明
            axis               0、1                    运算对应的轴
            level           整数或索引的级别名          指定运算对应的级別
            fill_value         数值                    指定运箅中出现的NaN的替代填充值
            skipna            布尔值                   运算是否跳过NaN
            index              序列                    指定行索引
            columns            序列                    指定列索引
            numeric_only      布尔值                   是否只针对数值进行运箅
            func             可调用对象                指定回调函数
            inplace          布尔值                    是否原地更新，若为否，则返回新对象
            encoding           ntf8                   指定文本编码
            dropna            布尔值                  是否删除包含NaN的行
        DataFrame内部结构
            DataFrame的index属性是multiindex对象，multiindex对象的_engine属性是objectengine对象，objectengine的mapping属性是一个pyobjecthashtable对象，它使标签对象整数的下标
            DataFrame的columns属性是index对象
            DataFrame的values属性是ndarray对象
            DataFrame的_data属性是blockmanager对象，blockmanager的blocks属性是floatblock对象、datatimeblock对象和objectblock对象，他们的values属性是ndarray对象
            DataFrame的shape属性是形状对象
            DataFrame的blocks属性是DataFrame对象
        
    下标存取（后续学习。。。）
        Series和DataFmme提供了丰富的下标存取方法，除了直接使用[]运算符之外，还可以使用.loc[]、.iloc[]、.at[]、.iat[]和.ix[]等存取器存取其中的元素
        
        []同其他
        .loc[] 通过单个标签值、标签列表、标签数姐、布尔数组、标签切片等选择指定行与列上的数据
        .iloc[]使用整数下标
        .query()通过表达式筛选
    
    文件的输入与输出
        函数名                       说明
        read_csv()                从CSV格式的文本文件读取数据
        read_excel()              从Excel文件读入数据
        HDFStore()                使用HDF5文件读写数据
        read_sql()                从SQL数据库的査询结果载入数据
        read_pickle()             读入Pickle序列化之后的数据

        read_csv()
            sep参数指定数据的分隔符号，可以使正则表达式，默认值为逗号。有时CSV文件为了便于阅读，在逗号之后添加了一些空格以对齐每列的数据。
                如果希望忽略这些空格，可以将skipinitialspace参数设置为True。
            如果数据使用空格或制表符分隔，可以不设置sep参数，而将delim_whitespace参数设置为True。
            默认情况下第一行文本被作为列索引标签，如果数据文件中没有保存列名的行，可以设置header参数为0。
            如果数据文件之前包含一些说明行，可以使用skipows参数指定数据开始的行号。
            na_values、tnie_values 和false_values 等参数分别指足NaN、True 和False 对应的字符串列表。
            如果希望从字符串读入数据，可以使用io.BytesIO(string)将字符串包装成输入流。
            如果希望将字符串转换为时间，可以使用parse_dates指定转换为时间的列。
            如果数据中包含中文，可以使encoding参数指定文件的编码，例如utf-8、gbk等。
                指定编码之后得到的字符串列为Unicode字符串。
            可以使用usecols参数指定需要读入的列。
            当文件很大时，可以用chunksize参数指定一次读入的行数。当使用chunksize时，read_csv() 返回一个迭代器。
            当文件名包含中文时，需要使用Unicode字符串指定文件名

        读写数据库
            用to_sql()可以将数据写入SQL数据库，它的第一个参数是数据库的表名，第二个参数是表示与数据库连接的engine对象，engine在sqlalchemy库中定义
            from sqlalchemy import create_engine #从sqlalchemy中载入create_engine()
            engine = create_engine('sqlite:///data/aqi.db') #调用sqlite打开数据库文件
            try：
              engine.execute('DROP TABLE aqi)
            except:
              pass
            
            str_cols = ['position','city','level']

            for df in read_aqi_files('data/aqi/*.csv')
                for col in str_cols:
                    df[col] = df[col].str.decode('utf-8')#解码为utf8
                df.to_sql('aqi',engine,if_exists='append',index=False)#调用to_sql（）写入数据库，if_exist（）表示当表存在时，将新数据添加到表中
                
             df_aqi = pd.read_sql('aqi',engine)#调用read_sql（）从数据库中读取aqi的表
         
         使用pickle序列化
            to_pickle()和read_pickle()对DataFrame对象进行序列化和反序列化

    数值运算函数
        numpy中的都可以用
        
        字符串处理
            Series对象提供了大量的字符串处理方法，pandas使用一个类似名称空间变量的对象str来包装这些字符串相关方法
                str.upper()将序列中的所有字母都转换为大写
                str.decode()解码
                str.encode()编码
                str[:3]支持切片
                字符串序列与字符串一样，支持加法和乘法运算
                str.cat()连接两个字符串对应的元素
                调用astype()方法可以对Series对象中的所有元素进行类型转换
                str.split()将每个字符分隔
                str.join()以符号连接每个列表中的元素
                
    时间序列
        pandas提供了时间点、时间段和时间间隔有关的类型，以及元素为这些类型的对象，并提供了许多时间序列相关的函数
        
        Timestamp时间点、Period时间段、Timedelta时间间隔
            Timestamp对象，从datetime类继承，表示时间轴上的一个时刻，提供了方便的时区转换功能
                Timestamp.now()获取当前时间，他是不包含时区信息的本地时间
                Timestamp.now().tz_localize()可以得到指定时区的Timestamp对象
                Timestamp.now().tz_localize().tz_convert()转换时区（只能转换带时区信息的对象）

                pytz模块的common_timezones()可以获得常用的表示时区的字符串
                    import pytz
                    pytz.common_timezones()

            Period对象表示一个标准的时间段，如某年、某月、某日、某小时等，时间段的长短有freq决定
                pd.Period.now(freq='D')#当前时间的日时间段
                pd.Period.now(freq='H')#当前时间的小时时间段
                    freq属性可选值可通过以下代码获得
                        from pandas.tseries import frequencies
                        frequencies._period_code_map.keys()
                周期为年度和星期的时间段，可以通过freq指定开始的时间，时间段的起终点时间可通过start_time和end_time属性获得
                    pd.Period.now(freq='W')#当前时间以星期日开始的时间段
                    pd.Period.now(freq='W-MON')#当前时间以星期一开始的时间段
                调用Timestamp对象的to_period()方法可以把时间点转换为包含该时间点的时间段，不包含时区信息
                    Timestamp.now().to_period('H')
                Timestamp和Period对象可以通过其属性获得年、月、日等信息
                    now().year#获取当前时间的年份
                    now().month#获取当前时间的月份
                    now().hour#获取当前时间的小时

            Timedelta时间间隔对象
                将两个时间点相减可以得到表示时间间隔的Timedelta对象
                时间点和时间间隔可以进行加减运算
                Timedelta对象的days、seconds、microseconds和nanoseconds等属性分别获得它包含的天数、秒数、微秒数和纳秒数，注意单位统一再计算
                也可以通过关键字参数直接指定时间间隔的天数、小时数、分钟数和秒数
                    pd.Timedelta(days=1,hours=2,seconds=10.5)
                    
        时间序列(Series对象的索引为DatetimeIndex对象，这种Series对象被称为时间序列）
            pandas的函数date_range()可以创建以start为起点、以end为终点、周期为freq的DatetimeIndex对象
                def random_timestamps(start,end,freq,count):
                    index=pd.date_range(start,end,freq=freq)
                    locations=np.random.choice(np.arange(len(index)),size=count,replace=False)
                    locations.sort()
                    return index[locations]

                np.random.seed(42)
                ts_index = random_timestamps('2018-01-01','2018-10-01',freq='Min',count=5)
                pd_index = ts_index.to_period('M')
                td_index = pd.TimedeltaIndex(np.diff(ts_index))

                print(ts_index,'\n',pd_index,'\n',td_index,'\n')
            
            查看索引对象的类型属性用属性dtype
            DatetimeIndex、PeriodIndex和TimedeltaIndex对象有许多与时间相关的属性，weekday、month、seconds等
            DatetimeIndex.shift(n,freq)可以移动时间点，将当前时间移动n个freq时间单位，对于天和小时，结果相当于与指定的时间间隔相加，对于月份等不精确时间单位，则移动一个单位相当于移动到月底或月初
            DatetimeIndex.normalize()将时刻改为当天的凌晨零点，可以理解为按日期取整
            如果希望对任意时间周期取整，可以先通过to_period()将其转换为PeriodIndex对象，然后调用to_timestamp()方法转回DatetimeIndex对象，参数how决定时间段的起点还是终点转换为时间点，默认值为‘start’
            时间序列提供一些专门用于处理时间的方法:
                between_time()返回所有位于指定时间范围内的数据
                    a.between_time('8:00','9:00')
                tshift()则将索引移动指定的时间,PeriodIndex和TimedeltaIndex为索引的序列也可以使用tshifu()对索引进行移动
                    a.tshifu(1,freq='D')
            时间信息除了作为索引之外，还可以作为Series和DataFrame的列    
                ts_data = pd.Series(ts_index)
                ts_data.dtype#查看类型
                
        与NaN相关的函数
            pandas使用NaN表示缺失数据，整数列无法使用NaN，因此如果整数类型的列出现缺失数据，则会被自动转换为浮点数类型的列
            将布尔类型的DataFrame对象传递给整数类型的DataFrame对象的where()方法，该方法将False对象的元素设置为NaN
            where()方法，将False对象的元素设置为NaN
            dtypes属性查看数据类型
            isnull()和notnull()用于判断元素值是否为NaN，它们返回全是布尔值的DataFrame对象，notnull()少创建一个临时对象，运算效率更高一些
            pd.DataFrame.count(self, axis=0, level=None, numeric_only=False)返回每行或每列的非NaN元素的个数
            pd.DataFrame.dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False)
                thresh参数指定NaN个数的阈值，删除大于等于改阈值的行，thresh()参数只对行产生作用
            当行数据按照某种物理顺序排列时，可使用NaN前后的数据对齐进行填充
                ffill()使用之前数据填充
                bfill()使用之后数据填充
                interpolate()使用前后数据进行插值填充
                    interpolate()默认使用等距线性插值，method参数指定插值算法
                可以使用字典对不同的列使用不同的值填充
                    fillna({'a':0,'b':1})
                各种聚合方法的skipna参数默认为True，计算时忽略NaN元素，如果需要忽略包含NaN的整行先调用dropna(),如果将skipna参数设置为False，有NaN值的行或列将返回NaN
                combine_first(other)使用other填充NaN元素    
        
        改变DataFrame形状
            函数名                 功能                   函数名                       功能
            concat              拼接多块数据              drop                         删除行或列
            set_index           设置索引                  reset_index                 将行索引转换为列
            stack               将列索引转换为行索引       uastack                     将行索引转换为列索引
            reorder_levels      设置索引级别的顺序         swaplevel                   交换索引中两个级别的顺序  
            sort_index           对索引排序                pivot                       创建透视表
            melt                透视表的逆变换             assign                     返回添加新列之后的数据
            
            添加删除列和行
                添加新列：DataFrame[colname]=values
                         DataFrame[colname]=DataFrame.eval('表达式')
                assign()方法添加由关键字参数指定的列，它返回一个新的DataFrame对象，原数据内容保持不变
                append()方法用于添加行，返回一个全新的对象，循环中使用append()添加数据会极大降低程序的运算速度，可以使用一个列表缓存所有分块的数据，然后用concat()将这些数据沿指定轴拼接到一起
                drop()删除指定的行或列
            行索引与列的转换
                reset_index()可以将索引转换为列，通过level参数可以指定被转换为列的级别，如果删除索引可以设置drop参数为True
                set_index()可以将列转换为行索引,如果append()参数为False，则删除当前的行索引，若为True则当前的索引添加新的级别
            行列索引相互转换
                stack()方法把指定级别的列索引转换为行索引
                unstack()方法将指定级别的行索引指定为列索引
            交换索引等级
                reorder_levels()设置索引级别的顺序和swaplevel()交换指定轴的索引级别
            透视表
                pd.DataFrame.pivot(self, index=None, columns=None, values=None)
                    将三列数据分别指定为行索引、列索引和值列，返回二维表格
                melt()是pivot()的逆转换，不能对行索引进行操作，先调用reset_index()将行索引转换为列，然后指定id_vars参数
         
        分组运算
            分组运算是使用特定的条件将数据分为多个分组，然后对每个分组进行运算，最后再讲结果整合起来。
            groupby()方法实现分组
                groupby（）的axis参数默认为0,表示对源数据的行进行分组。源数据中的每行与分组数据中的每个兀素对应，分组数据中的每个唯一值对应一个分组。由于图中的分组数据中有两个唯一值，因此得到两个分组
                当分组用的数据在源数据中时，可以通过直接指定列名指定分组数据
                    可以用过列表传递多组分组数据给groupby()
                当分组数据不在数据源中时，可以直接传递分组数据
                当分组数据可以通过源数据的行索引计算时，可以将计算函数传递给groupby()
            GroupBy对象
                使用len()可以获取分组数
                GroupBy对象支持迭代口，它与字典的iteritems()方法类似
                get_group()方法可以获得与指定的分组键对应的数据：
                    a.get_group('A')
                对GroupBy的下标操作将获得一个只包含源数据中指定列的新GroupBy对象
            分组-运算-合并
                通过GroupBy对象提供的agg()、transform()、filter()以及apply()等方法可以实现各种分组运算
                agg()聚合
                    agg()对每个分组中的数据进行聚合运算，指一组由N个数值组成的数据转换为单个数值的运算，如求和、平均值、中间值、随机取值等
                transform()转换
                    transform()对每个分组中的数据进行转换运算
                filter()过滤
                    filter()对每个分组进行条件判断
                apply()
                    apply()将表示每个分组的DataFrame对象传递给回调函数并收集其返回值，并将这些返回值按照某种规则合并
                    
        数据处理和可视化实例
            














        
        
